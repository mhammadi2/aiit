generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  profile       Profile?
  donations     Donation[]
  events        Event[]
  posts         Post[]
  resetToken    String?   // Add this for password reset functionality
  resetTokenExpiry DateTime? // Add this for password reset functionality
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  avatar      String?
  bio         String?
  phoneNumber String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Donation {
  id          String    @id @default(cuid())
  amount      Float
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  status      PaymentStatus
  paymentMethod PaymentMethod
  transactionId String?
  refundStatus RefundStatus @default(NONE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Event {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  location    String
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  emailLists  EmailList[]
  notifications EventNotification[]
}


model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  imageUrl    String?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum RefundStatus {
  NONE
  PENDING
  COMPLETED
  REJECTED
}

model EmailList {
  id          String    @id @default(cuid())
  name        String
  description String?
  emails      String[]
  events      Event[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model EventNotification {
  id        String    @id @default(cuid())
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id])
  status    NotificationStatus
  sentAt    DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}